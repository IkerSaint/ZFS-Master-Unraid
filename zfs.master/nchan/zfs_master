#!/usr/bin/php -q
<?PHP
/* Copyright 2023, IkerSaint
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$docroot = '/usr/local/emhttp';
$plugin = "zfs.master";

require_once "$docroot/webGui/include/Wrappers.php";
require_once "$docroot/webGui/include/publish.php";

require_once $docroot."/plugins/".$plugin."/include/ZFSMHelpers.php";
require_once $docroot."/plugins/".$plugin."/backend/ZFSMOperations.php";

$zfsm_cfg = loadConfig(parse_plugin_cfg($plugin, true));
$zfsm_cfg['version'] = parse_ini_file('/etc/unraid-version')['version'];

function getData($include_snapshots) {
    $zpool_global = getZFSPools();
    $zpool_devices = array();
    $zpool_datasets = array();

    foreach ($zpool_global as $zpool):
        $zpool_name = $zpool['Pool'];

        $zpool_devices[$zpool_name] = getZFSPoolDevices($zpool_name);
        if ($include_snapshots):
            $zpool_datasets[$zpool_name] = getZFSPoolDatasetsAndSnapshots($zpool_name, $zfsm_cfg['dataset_exclusion']);
        else:
            $zpool_datasets[$zpool_name] = getZFSPoolDatasets($zpool_name, $zfsm_cfg['dataset_exclusion']);
        endif;
        $zpool_global[$zpool_name]['Snapshots'] = $zpool_datasets[$zpool_name]['total_snapshots'];
        $zpool_global[$zpool_name]['MountPoint'] = $zpool_datasets[$zpool_name]['mountpoint'];
    endforeach;

    $message = array();
    $message['data'] = array();
    $message['op'] = $include_snapshots ? "getAll" : "getDatasets";
    $message['data']['pools'] = $zpool_global;
    $message['data']['devices'] = $zpool_devices;
    $message['data']['datasets'] = $zpool_datasets;

    publish('zfs_master', json_encode($message));

    return $message;
}

function getAllData() {
    publish('zfs_master', '{"op":"start_refresh"}');

    getData(true);

    publish('zfs_master', '{"op":"stop_refresh"}');
}

function getDatasetsSnapshots($zpool, $zdatasets) {
    $message = array();
    $message['data'] = array();
    $message['op'] = "getSnapshot";
    $message['data']['pool'] = $zpool;

    foreach ($zdatasets as $zdataset):
        $message['data']['dataset'] = $zdataset;
        $message['data']['snapshots'] = getDatasetSnapshots($zpool, $zdataset['name']);

        publish('zfs_master', json_encode($message));

        getDatasetsSnapshots($zpool, $zdataset['child']);
    endforeach;
}

function getLazyLoadData() {
    publish('zfs_master', '{"op":"start_refresh"}');

    $message = getData(false);

    foreach ($message['data']['datasets'] as $zpool):
        getDatasetsSnapshots($zpool['name'], $zpool['child']);
    endforeach;

    publish('zfs_master', '{"op":"stop_refresh"}');
}

$sleep_time = 0.0;

while (true) {
    if ($zfsm_cfg['refresh_interval'] == 0):
        if (file_exists('/tmp/zfsm_reload') == true):
            if ($zfsm_cfg['lazy_load'] == false):
                getAllData();
            else:
                getLazyLoadData();
            endif;

            unlink('/tmp/zfsm_reload');
        endif;
    elseif ($zfsm_cfg['refresh_interval'] < $sleep_time || file_exists('/tmp/zfsm_reload') == true):
        if ($zfsm_cfg['lazy_load'] == false):
            getAllData();
        else:
            getLazyLoadData();
        endif;

        $sleep_time = 0.0;
        unlink('/tmp/zfsm_reload');
    endif;

    usleep(250000); 
    $sleep_time += 0.25;
}
?>