Menu="Main:2"
Title="ZFS Master"
Tag="database"
Cond="file_exists('/usr/sbin/zpool')"
Nchan="zfs_master"
---
<?php
$plugin = "zfs.master";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';

require_once $docroot."/plugins/".$plugin."/include/ZFSMBase.php";
require_once $docroot."/plugins/".$plugin."/include/ZFSMHelpers.php";

$zfsm_cfg = loadConfig(parse_plugin_cfg($plugin, true));
$zfsm_cfg['version'] = parse_ini_file('/etc/unraid-version')['version'];
$zfsm_cfg['version'] = parse_ini_file('/etc/unraid-version')['version'];

$lastrefreshtext = '<span class="zfs_bar_text"><a class="tooltip" title="Information refresh time"><i id="zfsm-last-refresh"></i></a></span>';
$refreshbutton = '<span class="zfs_bar_button"><a style="cursor:pointer" class="tooltip" title="Refresh Information" onclick="requestRefresh()"><i id="zfsm-refresh" class="fa fa-refresh"></i></a></span>';
$settingsbutton = '<span class="zfs_bar_button"><a style="cursor:pointer" class="tooltip" title="ZFS Master Settings" href="/Settings/ZFSMasterSettings"><i id="zfsm-settings" class="fa fa-gear"></i></a></span>';

?>

<link type="text/css" rel="stylesheet" href="/webGui/styles/font-awesome.css?v=1545863026">

<style type="text/css">	
  .zfs_table td span{margin-left:10px}
  .zfs_table tr>td{width:auto!important}
  .zfs_table tr>td+td+td{text-align:left!important}
  .zfs_table tr>td+td+td+td+td+td+td+td{text-align:left!important}
  .zfs_table tr>td+td+td+td+td+td+td+td+td{text-align:center!important}
  
  .zfs_bar_button {
	  padding-right: 8px;
	  float: right;
  }

  .zfs_bar_text {
	  padding-right: 8px;
	  float: right;
	  font-size: 1.2rem
  }
  
  .zfs_compact {
	  padding: 2px 4px 3px 6px!important;
	  margin: 2px 2px!important;
  }
  
</style>

<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">

<script type="text/javascript" src="<?autov('/plugins/zfs.master/assets/sweetalert2.all.min.js');?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/plugins/zfs.master/assets/sweetalert2.min.css');?>">

<div id="zfs_master_div">
<table id="zfs_master" class="zfs_table disk_status wide">
  <thead>
    <tr>
	  <td>Pool</td>
	  <td>Health</td>
	  <td>Option/Dataset Name</td>
	  <td>Size</td>
	  <td>Mount Point</td>
	  <td>Refer</td>
	  <td>Used</td>
	  <td>Free</td>
	  <td>Snapshots</td>
	</tr>
  </thead>
  <tbody id="zfs_master_body">

  </tbody>
</table>
</div>

:zfs_master_help_plug:
> **ZFS Master.**
>
> ZPool Information Tool.
:end

<script type="text/javascript" src="<?autov('/plugins/zfs.master/frontend/ZFSMFrontEnd.js');?>"></script>

<script>
  var zfs_sub = new NchanSubscriber('/sub/zfs_master',{subscriber:'websocket'});

  zfs_sub.on('message', function(data) {
	var msg = JSON.parse(data);
    if (msg.op == "getAll") {
		updateFullBodyTable(msg.data, <?=$zfsm_cfg['destructive_mode']?>, <?=$zfsm_cfg['snap_max_days_alert']?>);
    } else if (msg.op == "getDatasets") {
		$("#mypool-attribute-snapshots > span").text('0');

		updateFullBodyTable(msg.data, <?=$zfsm_cfg['destructive_mode']?>, <?=$zfsm_cfg['snap_max_days_alert']?>);
	} else if (msg.op == "getSnapshot") {
		updateSnapshotInfo(msg.data, <?=$zfsm_cfg['destructive_mode']?>, <?=$zfsm_cfg['snap_max_days_alert']?>);

		var total_snaps = parseInt($("#mypool-attribute-snapshots > span").text());
		$("#mypool-attribute-snapshots > span").text(total_snaps+msg.data['snapshots'].length);

	} else if (msg.op == "start_refresh") {
		replaceElementClass("#zfsm-refresh", "fa-refresh", "fa-spinner fa-spin");

	} else if (msg.op == "stop_refresh") {
		const curDate = new Date();
		
		replaceElementClass('#zfsm-refresh', 'fa-spinner fa-spin', 'fa-refresh');
		$("#zfsm-last-refresh").text('Last refresh at '+curDate.toLocaleTimeString('en-US'));
	}

	processHiddenDatasets();
  });

  $(function() {
	  zfs_sub.start();
	  addButtons();
	  requestRefresh();
  });

  $(document).click(function() {
	  removeContext();
  })

  function requestRefresh() {
	  $.post('<?=$urlzmadmin?>', {cmd: 'refreshdata'} );
  }

  function addButtons() {
	  var parent = getUnraidParentElement();
	  
	  parent.append('<?=$lastrefreshtext?>')
	  parent.append('<?=$settingsbutton?>');
	  parent.append('<?=$refreshbutton?>');
  }
  
  function replaceElementClass(element, oldClass, newClass){
	  $(element).removeClass(oldClass);
	  $(element).addClass(newClass);
  }
  
  function getUnraidParentElement() {
	  if ('<?=$zfsm_cfg['version']?>'.localeCompare('6.11.9', undefined, { numeric: true, sensitivity: 'base' }) == 1) {
		return $(".title .left").filter(function(){return $(this).text() === 'ZFS Master';}).parent();
	  }
	  return $("div#title > span.left").filter(function(){return $(this).text() === 'ZFS Master';}).parent();
  }

  function processHiddenDatasets() {
	var datasets = JSON.parse(getCookie('datasetsHidden'));
	
	if (datasets == null || datasets.length <= 0)
		return;

	for (let zdataset of datasets) {
		var myRows = document.getElementsByClassName(zdataset);
		
		for (let row of myRows) {
			$(row).hide(0);
			$('i[name=\''+zdataset+'\']').attr('class', 'fa fa-plus-square fa-append');
		} 
	}
  }

  function toggleDataset(zdataset) {
	var datasets = JSON.parse(getCookie('datasetsHidden'));
	var index = -1;

	if (datasets == null) {
		datasets = [];
	}

	var index = datasets.indexOf(zdataset);

	if (index > -1) {
		datasets.splice(index, 1);
	} else {
		datasets.push(zdataset);
	}

	var myRows = document.getElementsByClassName(zdataset);

	for (let row of myRows) {
		if (index == -1) {
			$(row).hide( "fast");
			$('i[name=\''+zdataset+'\']').attr('class', 'fa fa-plus-square fa-append');
		} else {
			$(row).show( "fast");
			$('i[name=\''+zdataset+'\']') .attr('class', 'fa fa-minus-square fa-append');
		}
	}

	setCookie('datasetsHidden', JSON.stringify(datasets));

	processHiddenDatasets();
  }
  
  function togglePoolTable(zpool_id, trclass) {
	var datasets = JSON.parse(getCookie('datasetsHidden'));
	var myArray = document.getElementsByClassName(trclass);
	var myButton = document.getElementById(zpool_id);
	var visibility = getCookie(trclass);

	if (datasets == null) {
		datasets = [];
	}

	for (let mytr of myArray) {
		if (visibility == "none") {
			var classList = $(mytr).attr('class').split(/\s+/);
			var cont = false;
			
			for (var i = 0; i < classList.length; i++) {
				if (datasets.indexOf(classList[i]) != -1) {
					cont = true;
					break;
				}
			}

			if (cont) {
				continue;
			}

			setCookie(trclass, 'table-row');	
			$(mytr).show("slow");
			myButton.firstChild.data = "Hide Datasets";
		} else {
			setCookie(trclass, 'none');	
			$(mytr).hide("slow");
			myButton.firstChild.data = "Show Datasets";
		}
	}
  }
  
  function createDataset(zpool) {
	  var csrf_token = $("input[name='csrf_token']").val();	  
	  openBox('<?=$urlcreatedataset?>?zpool='+zpool+'&csrf_token='+csrf_token,"Create Dataset",550,680,false);
  }

  function addDatasetContext(zpool, zdataset, snapscount, id, destructive_mode, encryption, origin) {
    var opts = [];
	var edit_opts = [];

	edit_opts.push(
		{
			text: _("Mountpoint"),
			action: function(e) {
				e.preventDefault();
				editDatasetProperty(zdataset, "mountpoint");
			}
		},
		{
			text: _("Compression"),
			action: function(e) {
				e.preventDefault();
				editDatasetProperty(zdataset, "compression");
			}
		},
		{
			text: _("Quota"),
			action: function(e) {
				e.preventDefault();
				editDatasetProperty(zdataset, "quota");
			}
		},
		{
			text: _("Record Size"),
			action: function(e) {
				e.preventDefault();
				editDatasetProperty(zdataset, "recordsize");
			}
		},
		{
			text: _("Access Time (atime)"),
			action: function(e) {
				e.preventDefault();
				editDatasetProperty(zdataset, "atime");
			}
		},
		{
			text: _("Extended Attributes (xattr)"),
			action: function(e) {
				e.preventDefault();
				editDatasetProperty(zdataset, "xattr");
			}
		},
		{
			text: _("Primary Cache"),
			action: function(e) {
				e.preventDefault();
				editDatasetProperty(zdataset, "primarycache");
			}
		},
		{
			text: _("Read Only"),
			action: function(e) {
				e.preventDefault();
				editDatasetProperty(zdataset, "readonly");
			}
		},
		{
			text: _("Sync"),
			action: function(e) {
				e.preventDefault();
				editDatasetProperty(zdataset, "sync");
			}
		}
	);

	opts.push({header:zdataset});

	if (destructive_mode != 0) {
		opts.push(
		  {
			text: _("Rename"),
			icon: "fa-font",
			action: function (e) {
				e.preventDefault();
				renameDataset(zdataset);
			}
		  },
		  {
			text: _("Edit Dataset"),
			icon: "fa-pencil",
			subMenu: edit_opts
		  },
		  {
			text: _("Destroy"),
			icon: "fa-trash",
			action: function (e) {
				e.preventDefault();
				destroyDataset(zdataset);
		    }
		  },
		  { divider: true }
		);
	}

    opts.push({
        text: _("Take Snapshot"),
        icon: "fa-camera-retro",
		action: function (e) {
			e.preventDefault();
			takeDatasetSnapshot(zdataset);
        },
    });
    
	if (encryption == 'available') {
		opts.push({
			text: _("Lock Dataset"),
			icon: "fa-lock",
			action: function(e) {
				e.preventDefault();
				lockDataset(zdataset);
			},
		});
	} else if (encryption == 'unavailable') {
		opts.push({
			text: _("Unlock Dataset"),
			icon: "fa-unlock",
			action: function(e) {
				e.preventDefault();
				unlockDataset(zdataset);
			},
		});
	}

	if (origin) {
		opts.push({
			text: _("Promote Dataset"),
			icon: "fa-upload",
			action: function(e) {
				e.preventDefault();
				promoteDataset(zdataset);
			},
		});
	}

	if (snapscount >= 1) {
        opts.push({
			text: _("Snapshots Admin"),
			icon: "fa-gears",
			action: function(e) {
				e.preventDefault();
				adminDatasetSnaps(zpool, zdataset);
			},
		});
    }

    context.attach("#" + id, opts);

	$("#dropdown-"+id+" > li:nth-child(3)").addClass("dropdown-submenu");

  }

  function removeContext() {
	$(`[id*="dropdown-"]`).each(function() {
		if (!$(this).hasClass('dropdown-menu-context')) {
			$(this).hide()
		}
    })
  }

  function takeDatasetSnapshot(zdataset) {
	  Swal2.fire({
		  title: '<strong>Take Dataset <br>'+zdataset+'</strong> Snapshot',
		  icon: 'question',
		  html: 'This operation will take a Snapshot of the Dataset, are you sure?',
		  input: 'checkbox',
		  inputPlaceholder: 'Recursively create snapshots of all descendent datasets',
		  showConfirmButton: true,
		  confirmButtonText: "Snapshot",
		  showCancelButton: true
	  }).then((result) => {
		  if (result.isConfirmed) {
			  $.post('<?=$urlzmadmin?>',{cmd: 'snapshotdataset', zdataset: zdataset, recursive: result.value}, function(data) {
				Swal2.fire({
					title: 'Snapshot Result',
					icon: 'info',
					html: formatAnswer(JSON.parse(data))
				});
			  });
		  }
	  });
  }

  function getPropertyEditHTML(zdataset, property, value) {
	var tmpHTML = '';

	switch (property) {
		case 'mountpoint':
			return '<input id="swal2-input" maxlength="256" autocapitalize="off" autocorrect="off" class="swal2-input" placeholder="Dataset new mountpoint (Full path)" value="'+value+'" type="mytext" style="display: flex;">';
		case 'quota':
			if (value) {
				value = fromBytesToString(value).replace(/ +/g, "");
			}

			return '<input id="swal2-input" name="quota" class="swal2-input zfsm-w10" maxlength="7" value="'+value+'">';
		case 'compression':
			tmpHTML = '<select id="swal2-input" name="compression" class="swal2-input"><option value="inherit">Inherit</option><option value="off">Off</option><option value="lz4">lz4</option><option value="gzip">gzip</option><option value="zstd">zstd</option></select>';
			break;
		case 'recordsize':
			if (value) {
				value = fromBytesToString(value).replace(/ +/g, "");
			}

			tmpHTML ='<select id="swal2-input" name="recordsize" class="zfsm-input"><option value="inherit">Inherit</option><option value="512B">512</option><option value="4KB">4KB</option><option value="8KB">8KB</option><option value="16KB">16KB</option><option value="64KB">64KB</option><option value="128KB">128KB</option><option value="1MB">1MB</option></select>';
			break;
		case 'atime':
			tmpHTML = '<select id="swal2-input" name="atime" class="zfsm-input"><option value="inherit">Inherit</option><option value="off">Off</option><option value="on">On</option></select>';
			break;
		case 'xattr':
			tmpHTML = '<select id="swal2-input" name="xattr" class="zfsm-input"><option value="inherit">Inherit</option><option value="sa">sa</option><option value="on">on</option><option value="off">off</option></select>';
			break;
		case 'primarycache':
			tmpHTML = '<select id="swal2-input" name="primarycache" class="zfsm-input"><option value="inherit">Inherit</option><option value="all">All</option><option value="metadata">Metadata</option><option value="none">None</option></select>';
			break;
		case 'readonly':
			tmpHTML = '<select id="swal2-input" name="readonly" class="zfsm-input"><option value="off">Off</option><option value="on">On</option></select>';
			break;
		case 'sync':
			tmpHTML = '<select id="swal2-input" name="sync" class="zfsm-input"><option value="standard">Standard</option><option value="always">Always</option><option value="disabled">Disabled</option></select>';
			break;
	}

	var element = $(tmpHTML);

	element.find('option[value='+value+']').attr('selected', 'selected');
	var res = element.prop('outerHTML');

	return res;
  }

  function editDatasetProperty(zdataset, property) {
	var properties = {};

	$.post('<?=$urlzmadmin?>',{cmd: 'getdatasetproperties', zdataset: zdataset}, function(data) {
		properties = JSON.parse(data);

		Swal2.fire({
			title: '<strong>'+zdataset+' - '+property+'</strong>',
			html: getPropertyEditHTML(zdataset, property, properties[property]),
			showConfirmButton: true,
			showCancelButton: true,
			preConfirm: function () {
				return new Promise(function (resolve) {
					resolve([
						$('#swal2-input').val()
					])
				})
			}
		}).then((result) => {
			if (result.isConfirmed) {
				$.post('<?=$urlzmadmin?>',{cmd: 'editdatasetproperty', zdataset: zdataset, property: property, value: result.value[0]}, function(data) {
					Swal2.fire({
						title: 'Edit Result',
						icon: 'info',
						html: formatAnswer(JSON.parse(data))
					});
				});
			}
		});
		$(".swal2-html-container").attr("style", "display: grid;");
	});
  }

  function adminDatasetSnaps(zpool, zdataset) {
	  var csrf_token = $("input[name='csrf_token']").val();	 
	  openBox('<?=$urladmindatasetsnaps?>?zpool='+zpool+'&zdataset='+zdataset+'&csrf_token='+csrf_token, zdataset+" - Admin Snapshots",680,680,false);
  }

  function unlockDataset(zdataset) {
	  Swal2.fire({
		  title: '<strong>Passphrase for '+zdataset+'</strong>',
		  input: 'password',
		  inputPlaceholder: 'Enter your Passphrase',
		  inputAttributes: {
			maxlength: 128,
			autocapitalize: 'off',
			autocorrect: 'off'
		  },
		  showConfirmButton: true,
		  showCancelButton: true
	  }).then((result) => {
		  if (result.isConfirmed) {
			  $.post('<?=$urlzmadmin?>',{cmd: 'unlockdataset', zdataset: zdataset, passphrase: result.value}, function(data) {
				Swal2.fire({
					title: 'Unlock Result',
					icon: 'info',
					html: formatAnswer(JSON.parse(data))
				});
			  });
		  }
	  });
	  $(".swal2-input").css({"margin":"0 auto"});
  }

  function lockDataset(zdataset) {
	  $.post('<?=$urlzmadmin?>',{cmd: 'lockdataset', zdataset: zdataset},function(data) {
		Swal2.fire({
			title: 'Lock Result',
			icon: 'info',
			html: formatAnswer(JSON.parse(data))
		});
	  });
  }

  function promoteDataset(zdataset) {
	  $.post('<?=$urlzmadmin?>',{cmd: 'promotedataset', zdataset: zdataset},function(data) {
		Swal2.fire({
			title: 'Promote Result',
			icon: 'info',
			html: formatAnswer(JSON.parse(data))
		});
	  });
  }

  function renameDataset(zdataset) {
	  Swal2.fire({
		  title: '<strong>New name for '+zdataset+'</strong>',
		  html: '<input id="swal2-input" maxlength="256" autocapitalize="off" autocorrect="off" class="swal2-input" placeholder="Dataset new name (Full name)" value="'+zdataset+'" type="mytext" style="display: flex;">'+
				'<label for="swal2-checkbox" class="swal2-checkbox" style="display: flex;">'+
				'<input type="checkbox" id="swal2-checkbox">'+
				'<span class="swal2-label">Force unmount any file systems that need to be unmounted in the process</span>'+
				'</label>',
		  showConfirmButton: true,
		  showCancelButton: true,
		  preConfirm: function () {
			return new Promise(function (resolve) {
			  if ($('#swal2-input').val() == '') {
				Swal2.showValidationMessage("Enter a value for the dataset name");
				Swal2.enableButtons(); // Enable the confirm button again.
              } else {
				Swal2.resetValidationMessage();
				resolve([
				  $('#swal2-input').val(),
				  $('#swal2-checkbox').attr("checked") ? 1 : 0
				])
			  }
		    })
	      }
	  }).then((result) => {
		  if (result.isConfirmed) {
			$.post('<?=$urlzmadmin?>',{cmd: 'renamedataset', zdataset: zdataset, newname: result.value[0], force: result.value[1]}, function(data) {
				Swal2.fire({
					title: 'Rename Result',
					icon: 'info',
					html: formatAnswer(JSON.parse(data))
				});
			});
		  }
	  });
	  $(".swal2-html-container").attr("style", "display: grid;");
  }
  
  function destroyDataset(zdataset) {
	  Swal2.fire({
		  title: '<strong>Destroy Dataset<br>'+zdataset+'</strong>',
		  icon: 'warning',
		  html: 'This operation will destroy the Dataset, <b>which cannot be undone</b>, are you sure?',
		  input: 'checkbox',
		  inputPlaceholder: 'Force and Recursively Destroy all Children and Dependents',
		  showConfirmButton: true,
		  confirmButtonText: "Destroy",
		  showCancelButton: true
	  }).then((result) => {
		  if (result.isConfirmed) {
			  $.post('<?=$urlzmadmin?>',{cmd: 'destroydataset', zdataset: zdataset, force: result.value}, function(data) {
				Swal2.fire({
					title: 'Destroy Result',
					icon: 'info',
					html: formatAnswer(JSON.parse(data))
				});
			  });
		  }
	  });
  }

  function formatAnswer(answer, indentLevel = 0) {
    const indent = '&emsp;&emsp;'.repeat(indentLevel); // Four spaces for each level of indentation
    let result = '';

    for (const key in answer) {
        if (typeof answer[key] === 'object') {
            result += `${formatAnswer(answer[key], indentLevel + 1)}`;
        } else {
            result += `${indent}${key}: ${answer[key]}<br>`;
        }
    }

    return result;
  }


</script>
